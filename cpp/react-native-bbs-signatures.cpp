// Here we implement our methods that are generated by tscodegen.
// Every function gets the JSI runtime. For most methods we do not
// need this.

#include "react-native-bbs-signatures.h"
#include "bbs.h"
#include "TypedArray.h"

using namespace facebook;
using namespace react;

NativeBbsSignatures::NativeBbsSignatures(std::shared_ptr<CallInvoker> jsInvoker)
    : BbsSignaturesCxxSpecJSI(jsInvoker){};

void NativeBbsSignatures::bbs_string_free(jsi::Runtime &rt,
                                          const jsi::Object &options) {
    
    
}

void NativeBbsSignatures::bbs_byte_buffer_free(jsi::Runtime &rt,
                                               const jsi::Object &options) {}

void NativeBbsSignatures::free_bbs_blind_commitment(jsi::Runtime &rt, const jsi::Object &options) {}

void NativeBbsSignatures::free_bbs_blind_sign(jsi::Runtime &rt,
                                              const jsi::Object &options) {}

void NativeBbsSignatures::free_create_proof(jsi::Runtime &rt,
                                            const jsi::Object &options) {}

void NativeBbsSignatures::free_bbs_sign(jsi::Runtime &rt,
                                        const jsi::Object &options) {}

void NativeBbsSignatures::free_verify_proof(jsi::Runtime &rt,
                                            const jsi::Object &options) {}

void NativeBbsSignatures::free_verify_sign_proof(jsi::Runtime &rt,
                                                 const jsi::Object &options) {}

double NativeBbsSignatures::bbs_blind_signature_size(jsi::Runtime &rt) {
    return ::bbs_blind_signature_size();
}

double NativeBbsSignatures::bbs_blind_commitment_context_init(jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}

double NativeBbsSignatures::bbs_blind_commitment_context_add_message_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_add_message_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_add_message_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_set_nonce_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_set_nonce_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_set_nonce_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_commitment_context_finish(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_blinding_factor_size(jsi::Runtime &rt,
                                              const jsi::Object &options) {
  return 0;
}

double NativeBbsSignatures::bbs_blind_sign_context_init(jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}

double NativeBbsSignatures::bbs_blind_sign_context_add_message_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_sign_context_add_message_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_sign_context_add_message_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_sign_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_sign_context_set_secret_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_blind_sign_context_set_commitment(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_blind_sign_context_finish(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_unblind_signature(jsi::Runtime &rt,
                                                  const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_create_proof_context_size(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_create_proof_context_init(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_add_proof_message_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_add_proof_message_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_create_proof_context_add_proof_message_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_set_signature(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_set_nonce_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_set_nonce_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_set_nonce_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_create_proof_context_finish(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_signature_size(jsi::Runtime &rt,
                                               const jsi::Object &options) {
  return 0;
}

double NativeBbsSignatures::bbs_sign_context_init(jsi::Runtime &rt) {
    ExternError *err = new ExternError();
    uint64_t res = ::bbs_sign_context_init(err);
    
    TurboModuleUtils::handleError(rt, err); 
    
    return res;
}

double NativeBbsSignatures::bbs_sign_context_add_message_string(jsi::Runtime &rt, const jsi::Object &options) {
    uint64_t handle = TurboModuleUtils::jsiToValue<uint64_t>(rt, options.getProperty(rt, "handle"));
    std::string message = TurboModuleUtils::jsiToValue<std::string>(rt, options.getProperty(rt, "message"));

    ExternError *err = new ExternError();

    int32_t res = ::bbs_sign_context_add_message_string(handle, message.c_str(), err);
    
    TurboModuleUtils::handleError(rt, err);
    return res;
}

double NativeBbsSignatures::bbs_sign_context_add_message_bytes(jsi::Runtime &rt, const jsi::Object &options) {
    uint64_t handle = TurboModuleUtils::jsiToValue<uint64_t>(rt, options.getProperty(rt, "handle"));
    ByteArray message = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "message"));
    
    ExternError *err = new ExternError();
    
    int32_t res = ::bbs_sign_context_add_message_bytes(handle, message, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    return res;
}

double NativeBbsSignatures::bbs_sign_context_add_message_prehashed(jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}

double NativeBbsSignatures::bbs_sign_context_set_secret_key(jsi::Runtime &rt, const jsi::Object &options) {
    uint64_t handle = TurboModuleUtils::jsiToValue<uint64_t>(rt, options.getProperty(rt, "handle"));
    ByteArray secret_key = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "secretKey"));
    
    ExternError *err = new ExternError();
    
    int32_t res = ::bbs_sign_context_set_secret_key(handle, secret_key, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    return res;
}

double NativeBbsSignatures::bbs_sign_context_set_public_key(jsi::Runtime &rt, const jsi::Object &options) {
    uint64_t handle = TurboModuleUtils::jsiToValue<uint64_t>(rt, options.getProperty(rt, "handle"));
    ByteArray public_key = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "publicKey"));
    
    ExternError *err = new ExternError();
    
    int32_t res = ::bbs_sign_context_set_public_key(handle, public_key, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    return res;
}
double
NativeBbsSignatures::bbs_sign_context_finish(jsi::Runtime &rt,
                                             const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_verify_context_init(jsi::Runtime &rt,
                                             const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_context_add_message_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_context_add_message_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_context_add_message_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_context_set_signature(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_verify_context_finish(jsi::Runtime &rt,
                                               const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_get_total_messages_count_for_proof(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_verify_proof_context_init(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_add_message_string(
    jsi::Runtime &rt, const jsi::Object &options) {
    
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_add_message_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_add_message_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_set_proof(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_set_nonce_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_set_nonce_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_set_nonce_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_proof_context_finish(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_init(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_add_blinded(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_set_public_key(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_verify_blind_commitment_context_set_nonce_string(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_set_nonce_bytes(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bbs_verify_blind_commitment_context_set_nonce_prehashed(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_set_proof(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bbs_verify_blind_commitment_context_finish(
    jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bls_secret_key_size(jsi::Runtime &rt,
                                                const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bls_public_key_g2_size(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::blinding_factor_size(jsi::Runtime &rt,
                                                 const jsi::Object &options) {
  return 0;
}
double NativeBbsSignatures::bls_public_key_g1_size(jsi::Runtime &rt,
                                                   const jsi::Object &options) {
  return 0;
}


jsi::Object NativeBbsSignatures::bls_generate_g2_key(jsi::Runtime &rt,
                                                const jsi::Object &options) {
    ByteArray seed = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "seed"), true);
    
    ExternError *err = new ExternError();
    ByteBuffer *public_key = new ByteBuffer();
    ByteBuffer *secret_key = new ByteBuffer();
    
    ::bls_generate_g2_key(seed, public_key, secret_key, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    jsi::ArrayBuffer public_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, public_key);
    jsi::ArrayBuffer secret_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, secret_key);
    jsi::Object object = jsi::Object(rt);
    object.setProperty(rt, "publicKey", public_key_buffer);
    object.setProperty(rt, "secretKey", secret_key_buffer);
    return object;
}


jsi::Object NativeBbsSignatures::bls_generate_g1_key(jsi::Runtime &rt,
                                                const jsi::Object &options) {
    ByteArray seed = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "seed"), true);
    
    ExternError *err = new ExternError();
    ByteBuffer *public_key = new ByteBuffer();
    ByteBuffer *secret_key = new ByteBuffer();
    
    ::bls_generate_g1_key(seed, public_key, secret_key, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    jsi::ArrayBuffer public_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, public_key);
    jsi::ArrayBuffer secret_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, secret_key);
    jsi::Object object = jsi::Object(rt);
    object.setProperty(rt, "publicKey", public_key_buffer);
    object.setProperty(rt, "secretKey", secret_key_buffer);
    return object;
}
jsi::Object NativeBbsSignatures::bls_generate_blinded_g2_key(jsi::Runtime &rt,
                                                 const jsi::Object &options) {
    ByteArray seed = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "seed"), true);
    
    ExternError *err = new ExternError();
    ByteBuffer *public_key = new ByteBuffer();
    ByteBuffer *secret_key = new ByteBuffer();
    // TODO: What is the blinding_factor
    ByteBuffer *blinding_factor = new ByteBuffer();
    
    ::bls_generate_blinded_g2_key(seed, public_key, secret_key, blinding_factor, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    jsi::ArrayBuffer public_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, public_key);
    jsi::ArrayBuffer secret_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, secret_key);
    jsi::Object object = jsi::Object(rt);
    object.setProperty(rt, "publicKey", public_key_buffer);
    object.setProperty(rt, "secretKey", secret_key_buffer);
    return object;
}
jsi::Object NativeBbsSignatures::bls_generate_blinded_g1_key(jsi::Runtime &rt, const jsi::Object &options) {
    ByteArray seed = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "seed"), true);
    
    ExternError *err = new ExternError();
    ByteBuffer *public_key = new ByteBuffer();
    ByteBuffer *secret_key = new ByteBuffer();
    ByteBuffer *blinding_factor = new ByteBuffer();
    
    ::bls_generate_blinded_g1_key(seed, public_key, secret_key, blinding_factor, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    jsi::ArrayBuffer public_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, public_key);
    jsi::ArrayBuffer secret_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, secret_key);
    jsi::ArrayBuffer blinding_factor_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, blinding_factor);
    
    jsi::Object object = jsi::Object(rt);
    object.setProperty(rt, "publicKey", public_key_buffer);
    object.setProperty(rt, "secretKey", secret_key_buffer);
    object.setProperty(rt, "blindingFactor", blinding_factor_buffer);
    
    return object;
}
double NativeBbsSignatures::bls_get_public_key(jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}
double
NativeBbsSignatures::bls_secret_key_to_bbs_key(jsi::Runtime &rt, const jsi::Object &options) {
  return 0;
}

jsi::Object NativeBbsSignatures::bls_public_key_to_bbs_key(jsi::Runtime &rt, const jsi::Object &options) {
    uint32_t message_count = TurboModuleUtils::jsiToValue<uint32_t>(rt, options.getProperty(rt, "messageCount"));
    ByteArray d_public_key = TurboModuleUtils::jsiToValue<ByteArray>(rt, options.getProperty(rt, "publicKey"));
    
    ExternError *err = new ExternError();
    ByteBuffer *public_key = new ByteBuffer();
    
    ::bls_public_key_to_bbs_key(d_public_key, message_count, public_key, err);
    
    TurboModuleUtils::handleError(rt, err);
    
    jsi::ArrayBuffer public_key_buffer = TurboModuleUtils::bytebufferToArrayBuffer(rt, public_key);
    jsi::Object object = jsi::Object(rt);
    object.setProperty(rt, "publicKey", public_key_buffer);
    
    return object;
}
